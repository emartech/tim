#!/usr/bin/env ruby

HOME_DIR = File.expand_path(File.dirname(__FILE__) + '/../')

require 'github_api'
require 'json'
require HOME_DIR + '/lib/config'


class TimRemotes
  REPO_LIST_FILE = "#{Dir.home}/.tim/etc/remotes/repo_list.json"



  def initialize
    @options = load_config(HOME_DIR + '/etc/tim.conf');
    @token = @options['github_token']
    @user = @options['github_user']
    @contents = Github::Client::Repos::Contents.new(oauth_token: @token)
    @github = Github.new(oauth_token: @token, auto_pagination: true)
  end



  def init
    repo_names = (@github.repos.list org: @user).map do |repo|
      { name: repo.name, url: repo.html_url, description: repo.description }
    end
    repo_names = repo_names.keep_if { |repo| has_tim?(repo[:name]) }
    File.open(REPO_LIST_FILE, 'w') { |file| file.write(repo_names.to_json) }
  end



  def list_repos
    repo_list = File.read(REPO_LIST_FILE)
    puts(JSON.parse(repo_list))
  end



  def setup(user, repo_name)
    # Clone repository
    ssh_url = (@github.repos.get user: user, repo: repo_name)['ssh_url']
    projects_path = "#{File.expand_path(@options['projects_dir'])}/#{repo_name}"
    output = %x[git clone #{ssh_url} #{projects_path} 2>&1]
    success = $?.success?
    return puts({ output: output, success: success }.to_json) if not success

    # Run tim setup
    Dir.chdir(projects_path)
    output = %x[tim setup]
    success = $?.success?
    success = false if output == "Unknown command.\n"
    puts({ output: output, success: success }.to_json)
  end



  def has_tim?(repo_name)
    begin
      @contents.find(@user, repo_name, '.tim')
    rescue
      false
    else
      true
    end
  end

end

COMMANDS = %w(list setup init)

remotes = TimRemotes.new

command = ARGV.shift
case command
when nil
  puts 'Available commands are:'
  COMMANDS.each { |command| puts "  #{command}" }
when COMMANDS[0]
  remotes.list_repos
when COMMANDS[1]
  remotes.setup(ARGV[0], ARGV[1])
when COMMANDS[2]
  remotes.init
else
  puts 'Unknown command...'
  exit 1
end
